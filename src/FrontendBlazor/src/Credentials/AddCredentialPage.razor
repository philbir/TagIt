@attribute [Route(Routing.Credentials.Add)]

<MudForm @ref="form">
    <MudPaper Class="pa-4">
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="model.Name" For="@(() => model.Name)" Label="Name" Required="true" RequiredError="Name is required" />
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value="model.Product" T="ProductInfo" Label="Product" >
                    @foreach (var product in Products)
                    {
                        <MudSelectItem Value="@product" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="model.ClientId" For="@(() => model.ClientId)" Label="ClientId" Required="true" RequiredError="ClientId is required" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="model.ClientSecret" For="@(() => model.ClientSecret)" Label="Client Secret" Required="true" RequiredError="Secret is required" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="model.Authority" For="@(() => model.Authority)" Label="Authority" Required="true" RequiredError="Authority is required" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=> Save())">Save</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="@Routing.Correspondent.Page" Class="mx-2">Cancel</MudButton>
    </MudPaper>
</MudForm>

@code {
    MudForm form;

    EditFormModel model = new EditFormModel();
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }


    public IList<ProductInfo> Products { get; set; } = new List<ProductInfo>()
        {
            new ProductInfo("Azure", "https://login.microsoftonline.com/common/v2.0/"),
            new ProductInfo("Google", "https://account.google.com"),
        };

    public class EditFormModel
    {
        public string Name { get; set; }

        public ProductInfo Product { get; set; }

        public string ClientId { get; set; }

        public string ClientSecret { get; set; }

        public string Authority { get; set; }

    }

    async Task Save()
    {
        NavigationManager.NavigateTo(Routing.Credentials.Page);
    }

    void ProductChanged()
    {
        Snackbar.Add($"Change: {model.Product}");
    }


    public record ProductInfo(string Name, string Authority)
    {

        public override string ToString()
        {
            return Name;
        }


    }
}
