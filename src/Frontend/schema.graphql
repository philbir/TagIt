"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """Streamed when true."""
  if: Boolean
) on FIELD

"""
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is
  executed after the policy has determined that the current user is allowed to
  access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on SCHEMA | OBJECT | FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID!]
  nin: [UUID!]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableNullableOfGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type EntityVersion {
  version: Int!
  createdAt: DateTime!
  createdBy: UUID!
}

input EntityVersionFilterInput {
  and: [EntityVersionFilterInput!]
  or: [EntityVersionFilterInput!]
  version: ComparableInt32OperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdBy: ComparableGuidOperationFilterInput
}

input ListFilterInputTypeOfTagFilterInput {
  all: TagFilterInput
  none: TagFilterInput
  some: TagFilterInput
  any: Boolean
}

input ListFilterInputTypeOfThingDataReferenceFilterInput {
  all: ThingDataReferenceFilterInput
  none: ThingDataReferenceFilterInput
  some: ThingDataReferenceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfThingRelationFilterInput {
  all: ThingRelationFilterInput
  none: ThingRelationFilterInput
  some: ThingRelationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfThumbnailFilterInput {
  all: ThumbnailFilterInput
  none: ThumbnailFilterInput
  some: ThumbnailFilterInput
  any: Boolean
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  things(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: ThingFilterInput
  ): ThingsConnection
  thingTypes: [ThingType!]!
}

enum RelationType {
  CHILD
  RELATATED
}

input RelationTypeOperationFilterInput {
  eq: RelationType
  neq: RelationType
  in: [RelationType!]
  nin: [RelationType!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Tag {
  typeId: UUID!
  value: String
  text: String
}

input TagFilterInput {
  and: [TagFilterInput!]
  or: [TagFilterInput!]
  typeId: ComparableGuidOperationFilterInput
  value: StringOperationFilterInput
  text: StringOperationFilterInput
}

type Thing implements Node {
  title: String
  typeId: UUID
  classId: UUID
  state: ThingState!
  label: String
  corespondentId: UUID
  receiverId: UUID
  tags: [Tag]
  date: DateTime
  thumbnails: [Thumbnail]
  relations: [ThingRelation]
  data: [ThingDataReference]
  id: ID!
  version: EntityVersion!
  type: ThingType
}

type ThingDataReference {
  type: String
  connectorId: UUID!
  location: String
}

input ThingDataReferenceFilterInput {
  and: [ThingDataReferenceFilterInput!]
  or: [ThingDataReferenceFilterInput!]
  type: StringOperationFilterInput
  connectorId: ComparableGuidOperationFilterInput
  location: StringOperationFilterInput
}

input ThingFilterInput {
  and: [ThingFilterInput!]
  or: [ThingFilterInput!]
  title: StringOperationFilterInput
  typeId: ComparableNullableOfGuidOperationFilterInput
  classId: ComparableNullableOfGuidOperationFilterInput
  state: ThingStateOperationFilterInput
  label: StringOperationFilterInput
  corespondentId: ComparableNullableOfGuidOperationFilterInput
  receiverId: ComparableNullableOfGuidOperationFilterInput
  tags: ListFilterInputTypeOfTagFilterInput
  date: ComparableNullableOfDateTimeOperationFilterInput
  thumbnails: ListFilterInputTypeOfThumbnailFilterInput
  relations: ListFilterInputTypeOfThingRelationFilterInput
  data: ListFilterInputTypeOfThingDataReferenceFilterInput
  id: ComparableGuidOperationFilterInput
  version: EntityVersionFilterInput
}

type ThingRelation {
  id: UUID!
  type: RelationType!
  from: UUID!
  to: UUID!
}

input ThingRelationFilterInput {
  and: [ThingRelationFilterInput!]
  or: [ThingRelationFilterInput!]
  id: ComparableGuidOperationFilterInput
  type: RelationTypeOperationFilterInput
  from: ComparableGuidOperationFilterInput
  to: ComparableGuidOperationFilterInput
}

"""A connection to a list of items."""
type ThingsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ThingsEdge!]

  """A flattened list of the nodes."""
  nodes: [Thing!]
}

"""An edge in a connection."""
type ThingsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Thing!
}

enum ThingState {
  DRAFT
  PROCESSING
  ACTIVE
  DELETED
}

input ThingStateOperationFilterInput {
  eq: ThingState
  neq: ThingState
  in: [ThingState!]
  nin: [ThingState!]
}

type ThingType {
  name: String
  validClasses: [UUID!]
  typeMap: [String]
  id: UUID!
  version: EntityVersion!
}

type Thumbnail {
  pageNumber: Int!
  fileId: String
}

input ThumbnailFilterInput {
  and: [ThumbnailFilterInput!]
  or: [ThumbnailFilterInput!]
  pageNumber: ComparableInt32OperationFilterInput
  fileId: StringOperationFilterInput
}

interface UserError {
  code: String!
  message: String!
}

scalar UUID

